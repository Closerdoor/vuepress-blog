(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{482:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"string-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-字符串"}},[t._v("#")]),t._v(" string 字符串")]),t._v(" "),a("h3",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString()")]),t._v(" "),a("p",[t._v('该方法属于Object对象，由于所有的对象都"继承"了Object的对象实例，因此几乎所有的实例对象都可以使用该方法。\nnull和undefined没有toString()方法\n'),a("code",[t._v("[].toString() //''结果为空字符串")])]),t._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String()")]),t._v(" "),a("h3",{attrs:{id:"字符串转义符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串转义符"}},[t._v("#")]),t._v(" 字符串转义符")]),t._v(" "),a("h3",{attrs:{id:"字符串换行处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串换行处理"}},[t._v("#")]),t._v(" 字符串换行处理")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("//如果长字符串必须分成多行，可以在每一行的尾部使用反斜杠。但是，输出的时候还是单行\nvar longString = 'Long \\\nlong \\\nlong \\\nstring';\n\nlongString\n// \"Long long long string\"\n")])])]),a("h2",{attrs:{id:"number-数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-数字"}},[t._v("#")]),t._v(" number 数字")]),t._v(" "),a("p",[a("strong",[t._v("范围")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("最小值：Number.MIN_VALUE，这个值为： 5e-324\n最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308\n无穷大：Infinity\n无穷小：-Infinity\n")])])]),a("h3",{attrs:{id:"js可以通过否运算符来取整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js可以通过否运算符来取整"}},[t._v("#")]),t._v(" js可以通过否运算符来取整")]),t._v(" "),a("p",[a("code",[t._v("~~ 13.33 // 13")])]),t._v(" "),a("h3",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Number(null) // 0\nNumber(undefined) // NaN\nNumber(NaN) // NaN\nNumber([]) // 0\nNumber([123]) // 123\nNumber(['123']) // 123\nNumber([undefined]) // 0\nNumber({}) // NaN\n")])])]),a("h3",{attrs:{id:"parseint-和-parsefloat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint-和-parsefloat"}},[t._v("#")]),t._v(" parseInt() 和 parseFloat()")]),t._v(" "),a("p",[a("strong",[t._v("parseInt(string,radix)")])]),t._v(" "),a("ul",[a("li",[t._v("如果parseInt的参数不是字符串，则会先转为字符串再转换。")]),t._v(" "),a("li",[t._v("如果第一个字符是数字会解析知道遇到非数字结束")]),t._v(" "),a("li",[t._v("如果第一个字符不是数字或者符号就返回NaN")]),t._v(" "),a("li",[t._v("parseInt的返回值只有两种可能，要么是一个十进制整数，要么是NaN。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('parseInt() 函数可解析一个字符串，并返回一个整数。\n如果参数radix不是数值，会被自动转为一个整数。这个整数只有在2到36之间，才能得到有意义的结果，超出这个范围，则返回NaN。如果第二个参数是0、undefined和null，则直接忽略。  \n当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。\n当忽略参数 radix , JavaScript 默认数字的基数如下:\n如果 string 以 "0x" 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。\n如果 string 以 0 开头，解析为十进制的整数,如果是数字,解析为八进制或十六进制的数字。\n如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('var num1 = parseInt("12.3abc");  // 返回12，\nvar num2 = parseInt("abc123");   // 返回NaN，\n')])])]),a("p",[a("strong",[t._v("parseFloat(string)")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("parseFloat()把字符串转换成浮点数\nparseFloat()和parseInt非常相似，不同之处在与\n\tparseFloat会解析第一个. 遇到第二个.或者非数字结束\n\t如果解析的内容里只有整数，解析成整数\n")])])]),a("h3",{attrs:{id:"str-str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str-str"}},[t._v("#")]),t._v(" +str -str")]),t._v(" "),a("h3",{attrs:{id:"nan-和-isnan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan-和-isnan"}},[t._v("#")]),t._v(" NaN 和 isNaN()")]),t._v(" "),a("p",[a("code",[t._v("0 / 0 会得到NaN")]),t._v("\nNaN 与任何值都不相等，包括他本身"),a("br"),t._v("\nNaN进行任何数学运算 结果也是 NaN"),a("br"),t._v(" "),a("code",[t._v("isNaN")]),t._v("方法可以用来判断一个值是否为"),a("code",[t._v("NaN")]),t._v("。但是，"),a("code",[t._v("isNaN")]),t._v("只对数值有效，如果传入其他值，会先转成数值再判断。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function meIsNaN(value) {\n  return typeof value === 'number' && isNaN(value);\n}\n//`NaN`为唯一不等于自身的值的这个特点\nfunction meIsNaN(value) {\n  return value !== value;\n}\n")])])]),a("h3",{attrs:{id:"isfinite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isfinite"}},[t._v("#")]),t._v(" isFinite")]),t._v(" "),a("p",[a("code",[t._v("isFinite")]),t._v("方法返回一个布尔值，表示某个值是否为正常的数值。"),a("br"),t._v("\n除了"),a("code",[t._v("Infinity")]),t._v("、"),a("code",[t._v("-Infinity")]),t._v("、"),a("code",[t._v("NaN")]),t._v("和"),a("code",[t._v("undefined")]),t._v("这几个值会返回"),a("code",[t._v("false")]),t._v("，"),a("code",[t._v("isFinite")]),t._v("对于其他的数值都会返回"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("isFinite(Infinity) // false\nisFinite(-Infinity) // false\nisFinite(NaN) // false\nisFinite(undefined) // false\nisFinite(null) // true\nisFinite(-1) // true\n")])])]),a("h2",{attrs:{id:"boolean-布尔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-布尔"}},[t._v("#")]),t._v(" boolean 布尔")]),t._v(" "),a("p",[t._v("数据类型转换,"),a("code",[t._v("''(空字符串) 0 null undefined NaN 会转换成false 其它都会转换成true")])]),t._v(" "),a("h3",{attrs:{id:"boolean-和-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-和-value"}},[t._v("#")]),t._v(" Boolean() 和 !!value")]),t._v(" "),a("h2",{attrs:{id:"undefined-和-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-和-null"}},[t._v("#")]),t._v(" undefined 和 null")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("undefined")]),t._v("：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量声明了，但没有赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ni "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用函数时，应该提供的参数没有提供，该参数等于 undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象没有赋值的属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v("  o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数没有返回值时，默认返回 undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("null")]),t._v("：表示空值，即此处的值为空 。")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v("在javascript中常见于释放内存空间")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Anything")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])]),a("h2",{attrs:{id:"判断数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型"}},[t._v("#")]),t._v(" 判断数据类型")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('typeof undefined //"undefined"\ntypeof null // "object"\n//针对未声明的变量\nif (typeof v === "undefined" ) {\n   console.log("变量 v 不存在")\n}\n')])])]),a("h3",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),a("h3",{attrs:{id:"object-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring"}},[t._v("#")]),t._v(" Object.prototype.toString")]),t._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("p",[a("strong",[t._v("数组本质上是一种对象")]),a("br"),t._v("\nObject.keys方法返回数组的所有键名,数组的键名其实也是字符串。之所以可以用数值读取，是因为非字符串的键名会被转为字符串。"),a("br"),t._v("\nlength属性的值就是等于最大的数字键加1，如果数组没有整数键，则length属性保持为0。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["0", "1", "2"]')]),t._v("\n\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'a'")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'a'")]),t._v("\n\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),a("h3",{attrs:{id:"判断数组类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数组类型"}},[t._v("#")]),t._v(" 判断数组类型")]),t._v(" "),a("p",[a("code",[t._v("typeof arr //'object'")]),t._v(" "),a("code",[t._v("Array.isArray([])")])]),t._v(" "),a("h3",{attrs:{id:"数组类型转化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组类型转化"}},[t._v("#")]),t._v(" 数组类型转化")]),t._v(" "),a("p",[a("strong",[t._v("转化成字符串")]),t._v("\narr1 + arr2 时，会把两者转换成字符串")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[],[null],[undefined]会转化成空字符串。其余原样转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Object]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"0,a,4"')]),t._v("\n")])])]),a("p",[a("strong",[t._v("转化成数字")]),t._v("\n数组的indexOf方法内部使用的是严格相等运算符，所以该方法对NaN不成立。\n"),a("code",[t._v("[NaN].indexOf(NaN) // -1")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[],[''],[null],[undefined]会转化成0，单个数字原样转换，其余为NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("h2",{attrs:{id:"运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[t._v("#")]),t._v(" 运算符")]),t._v(" "),a("p",[t._v("i++是一个表达式，他的返回值是i的值\n++i是一个表达式，他的返回值是i+1的值")]),t._v(" "),a("h2",{attrs:{id:"js中的比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的比较运算符"}},[t._v("#")]),t._v(" js中的比较运算符")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("字符串和其他对象比较大小 字符串和其他对象进行比较，大体要遵循下面的这些考量：\n\n两个操作数都是数值，则进行数值比较\n两个操作数都是字符串，则比较两个字符串第一个不通的字符编码值\n两个操作数有一个是数值，则将另一个转换为数值，再进行数值比较\n两个操作数有一个是对象，则先调用valueOf()方法或toString()方法，再用结果比较\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);